// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace chatServer {
class BlackList;
struct BlackListDefaultTypeInternal;
extern BlackListDefaultTypeInternal _BlackList_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace chatServer
PROTOBUF_NAMESPACE_OPEN
template<> ::chatServer::BlackList* Arena::CreateMaybeMessage<::chatServer::BlackList>(Arena*);
template<> ::chatServer::Message* Arena::CreateMaybeMessage<::chatServer::Message>(Arena*);
template<> ::chatServer::PlayerInfo* Arena::CreateMaybeMessage<::chatServer::PlayerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chatServer {

enum Message_MessageType : int {
  Message_MessageType_CHAT = 0,
  Message_MessageType_LOBBY_BROADCAST = 1,
  Message_MessageType_SERVER_BROADCAST = 2,
  Message_MessageType_Message_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_MessageType_Message_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_MessageType_IsValid(int value);
constexpr Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_CHAT;
constexpr Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_SERVER_BROADCAST;
constexpr int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_MessageType_descriptor();
template<typename T>
inline const std::string& Message_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_MessageType_descriptor(), enum_t_value);
}
inline bool Message_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
// ===================================================================

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatServer.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit constexpr PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return new PlayerInfo();
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatServer.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kStampFieldNumber = 1,
    kSignUpTimeFieldNumber = 4,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 stamp = 1;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::int32 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 signUpTime = 4;
  void clear_signuptime();
  ::PROTOBUF_NAMESPACE_ID::int32 signuptime() const;
  void set_signuptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signuptime() const;
  void _internal_set_signuptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chatServer.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 signuptime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BlackList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatServer.BlackList) */ {
 public:
  inline BlackList() : BlackList(nullptr) {}
  ~BlackList() override;
  explicit constexpr BlackList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlackList(const BlackList& from);
  BlackList(BlackList&& from) noexcept
    : BlackList() {
    *this = ::std::move(from);
  }

  inline BlackList& operator=(const BlackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackList& operator=(BlackList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlackList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlackList* internal_default_instance() {
    return reinterpret_cast<const BlackList*>(
               &_BlackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlackList& a, BlackList& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackList* New() const final {
    return new BlackList();
  }

  BlackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlackList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlackList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatServer.BlackList";
  }
  protected:
  explicit BlackList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNicknameFieldNumber = 2,
  };
  // repeated int64 uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_uid() const;
  void _internal_add_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 uid(int index) const;
  void set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_uid();

  // repeated string nickname = 2;
  int nickname_size() const;
  private:
  int _internal_nickname_size() const;
  public:
  void clear_nickname();
  const std::string& nickname(int index) const;
  std::string* mutable_nickname(int index);
  void set_nickname(int index, const std::string& value);
  void set_nickname(int index, std::string&& value);
  void set_nickname(int index, const char* value);
  void set_nickname(int index, const char* value, size_t size);
  std::string* add_nickname();
  void add_nickname(const std::string& value);
  void add_nickname(std::string&& value);
  void add_nickname(const char* value);
  void add_nickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nickname();
  private:
  const std::string& _internal_nickname(int index) const;
  std::string* _internal_add_nickname();
  public:

  // @@protoc_insertion_point(class_scope:chatServer.BlackList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatServer.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatServer.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_MessageType MessageType;
  static constexpr MessageType CHAT =
    Message_MessageType_CHAT;
  static constexpr MessageType LOBBY_BROADCAST =
    Message_MessageType_LOBBY_BROADCAST;
  static constexpr MessageType SERVER_BROADCAST =
    Message_MessageType_SERVER_BROADCAST;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Message_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 sender = 1;
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::int32 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receiver = 2;
  void clear_receiver();
  ::PROTOBUF_NAMESPACE_ID::int32 receiver() const;
  void set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receiver() const;
  void _internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .chatServer.Message.MessageType type = 4;
  void clear_type();
  ::chatServer::Message_MessageType type() const;
  void set_type(::chatServer::Message_MessageType value);
  private:
  ::chatServer::Message_MessageType _internal_type() const;
  void _internal_set_type(::chatServer::Message_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:chatServer.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 receiver_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInfo

// int32 stamp = 1;
inline void PlayerInfo::clear_stamp() {
  stamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::stamp() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.stamp)
  return _internal_stamp();
}
inline void PlayerInfo::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stamp_ = value;
}
inline void PlayerInfo::set_stamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.stamp)
}

// string nickname = 2;
inline void PlayerInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& PlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.nickname)
}
inline std::string* PlayerInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:chatServer.PlayerInfo.nickname)
  return _s;
}
inline const std::string& PlayerInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void PlayerInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:chatServer.PlayerInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chatServer.PlayerInfo.nickname)
}

// string password = 3;
inline void PlayerInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& PlayerInfo::password() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.password)
}
inline std::string* PlayerInfo::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:chatServer.PlayerInfo.password)
  return _s;
}
inline const std::string& PlayerInfo::_internal_password() const {
  return password_.Get();
}
inline void PlayerInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_password() {
  // @@protoc_insertion_point(field_release:chatServer.PlayerInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chatServer.PlayerInfo.password)
}

// int32 signUpTime = 4;
inline void PlayerInfo::clear_signuptime() {
  signuptime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_signuptime() const {
  return signuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::signuptime() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.signUpTime)
  return _internal_signuptime();
}
inline void PlayerInfo::_internal_set_signuptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  signuptime_ = value;
}
inline void PlayerInfo::set_signuptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signuptime(value);
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.signUpTime)
}

// -------------------------------------------------------------------

// BlackList

// repeated int64 uid = 1;
inline int BlackList::_internal_uid_size() const {
  return uid_.size();
}
inline int BlackList::uid_size() const {
  return _internal_uid_size();
}
inline void BlackList::clear_uid() {
  uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlackList::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlackList::uid(int index) const {
  // @@protoc_insertion_point(field_get:chatServer.BlackList.uid)
  return _internal_uid(index);
}
inline void BlackList::set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:chatServer.BlackList.uid)
}
inline void BlackList::_internal_add_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  uid_.Add(value);
}
inline void BlackList::add_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:chatServer.BlackList.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlackList::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlackList::uid() const {
  // @@protoc_insertion_point(field_list:chatServer.BlackList.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlackList::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlackList::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:chatServer.BlackList.uid)
  return _internal_mutable_uid();
}

// repeated string nickname = 2;
inline int BlackList::_internal_nickname_size() const {
  return nickname_.size();
}
inline int BlackList::nickname_size() const {
  return _internal_nickname_size();
}
inline void BlackList::clear_nickname() {
  nickname_.Clear();
}
inline std::string* BlackList::add_nickname() {
  std::string* _s = _internal_add_nickname();
  // @@protoc_insertion_point(field_add_mutable:chatServer.BlackList.nickname)
  return _s;
}
inline const std::string& BlackList::_internal_nickname(int index) const {
  return nickname_.Get(index);
}
inline const std::string& BlackList::nickname(int index) const {
  // @@protoc_insertion_point(field_get:chatServer.BlackList.nickname)
  return _internal_nickname(index);
}
inline std::string* BlackList::mutable_nickname(int index) {
  // @@protoc_insertion_point(field_mutable:chatServer.BlackList.nickname)
  return nickname_.Mutable(index);
}
inline void BlackList::set_nickname(int index, const std::string& value) {
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatServer.BlackList.nickname)
}
inline void BlackList::set_nickname(int index, std::string&& value) {
  nickname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatServer.BlackList.nickname)
}
inline void BlackList::set_nickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatServer.BlackList.nickname)
}
inline void BlackList::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatServer.BlackList.nickname)
}
inline std::string* BlackList::_internal_add_nickname() {
  return nickname_.Add();
}
inline void BlackList::add_nickname(const std::string& value) {
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatServer.BlackList.nickname)
}
inline void BlackList::add_nickname(std::string&& value) {
  nickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatServer.BlackList.nickname)
}
inline void BlackList::add_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatServer.BlackList.nickname)
}
inline void BlackList::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatServer.BlackList.nickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlackList::nickname() const {
  // @@protoc_insertion_point(field_list:chatServer.BlackList.nickname)
  return nickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlackList::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable_list:chatServer.BlackList.nickname)
  return &nickname_;
}

// -------------------------------------------------------------------

// Message

// int32 sender = 1;
inline void Message::clear_sender() {
  sender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::sender() const {
  // @@protoc_insertion_point(field_get:chatServer.Message.sender)
  return _internal_sender();
}
inline void Message::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_ = value;
}
inline void Message::set_sender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:chatServer.Message.sender)
}

// int32 receiver = 2;
inline void Message::clear_receiver() {
  receiver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_receiver() const {
  return receiver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::receiver() const {
  // @@protoc_insertion_point(field_get:chatServer.Message.receiver)
  return _internal_receiver();
}
inline void Message::_internal_set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receiver_ = value;
}
inline void Message::set_receiver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:chatServer.Message.receiver)
}

// string msg = 3;
inline void Message::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Message::msg() const {
  // @@protoc_insertion_point(field_get:chatServer.Message.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatServer.Message.msg)
}
inline std::string* Message::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:chatServer.Message.msg)
  return _s;
}
inline const std::string& Message::_internal_msg() const {
  return msg_.Get();
}
inline void Message::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message::release_msg() {
  // @@protoc_insertion_point(field_release:chatServer.Message.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chatServer.Message.msg)
}

// .chatServer.Message.MessageType type = 4;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::chatServer::Message_MessageType Message::_internal_type() const {
  return static_cast< ::chatServer::Message_MessageType >(type_);
}
inline ::chatServer::Message_MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:chatServer.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::chatServer::Message_MessageType value) {
  
  type_ = value;
}
inline void Message::set_type(::chatServer::Message_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chatServer.Message.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatServer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chatServer::Message_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chatServer::Message_MessageType>() {
  return ::chatServer::Message_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
