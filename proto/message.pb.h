// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace chatServer {
class BlackList;
struct BlackListDefaultTypeInternal;
extern BlackListDefaultTypeInternal _BlackList_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace chatServer
PROTOBUF_NAMESPACE_OPEN
template<> ::chatServer::BlackList* Arena::CreateMaybeMessage<::chatServer::BlackList>(Arena*);
template<> ::chatServer::PlayerInfo* Arena::CreateMaybeMessage<::chatServer::PlayerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chatServer {

// ===================================================================

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatServer.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit constexpr PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return new PlayerInfo();
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatServer.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kStampFieldNumber = 1,
    kSignUpTimeFieldNumber = 4,
  };
  // optional string nickname = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional int64 stamp = 1;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 signUpTime = 4;
  bool has_signuptime() const;
  private:
  bool _internal_has_signuptime() const;
  public:
  void clear_signuptime();
  ::PROTOBUF_NAMESPACE_ID::int64 signuptime() const;
  void set_signuptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_signuptime() const;
  void _internal_set_signuptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:chatServer.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int64 stamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 signuptime_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BlackList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatServer.BlackList) */ {
 public:
  inline BlackList() : BlackList(nullptr) {}
  ~BlackList() override;
  explicit constexpr BlackList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlackList(const BlackList& from);
  BlackList(BlackList&& from) noexcept
    : BlackList() {
    *this = ::std::move(from);
  }

  inline BlackList& operator=(const BlackList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackList& operator=(BlackList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlackList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlackList* internal_default_instance() {
    return reinterpret_cast<const BlackList*>(
               &_BlackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlackList& a, BlackList& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackList* New() const final {
    return new BlackList();
  }

  BlackList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlackList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlackList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatServer.BlackList";
  }
  protected:
  explicit BlackList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNicknameFieldNumber = 2,
  };
  // repeated int64 uid = 1;
  int uid_size() const;
  private:
  int _internal_uid_size() const;
  public:
  void clear_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_uid() const;
  void _internal_add_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 uid(int index) const;
  void set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_uid();

  // repeated string nickname = 2;
  int nickname_size() const;
  private:
  int _internal_nickname_size() const;
  public:
  void clear_nickname();
  const std::string& nickname(int index) const;
  std::string* mutable_nickname(int index);
  void set_nickname(int index, const std::string& value);
  void set_nickname(int index, std::string&& value);
  void set_nickname(int index, const char* value);
  void set_nickname(int index, const char* value, size_t size);
  std::string* add_nickname();
  void add_nickname(const std::string& value);
  void add_nickname(std::string&& value);
  void add_nickname(const char* value);
  void add_nickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nickname();
  private:
  const std::string& _internal_nickname(int index) const;
  std::string* _internal_add_nickname();
  public:

  // @@protoc_insertion_point(class_scope:chatServer.BlackList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > uid_;
  mutable std::atomic<int> _uid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInfo

// optional int64 stamp = 1;
inline bool PlayerInfo::_internal_has_stamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerInfo::has_stamp() const {
  return _internal_has_stamp();
}
inline void PlayerInfo::clear_stamp() {
  stamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::stamp() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.stamp)
  return _internal_stamp();
}
inline void PlayerInfo::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  stamp_ = value;
}
inline void PlayerInfo::set_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.stamp)
}

// optional string nickname = 2;
inline bool PlayerInfo::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerInfo::has_nickname() const {
  return _internal_has_nickname();
}
inline void PlayerInfo::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.nickname)
}
inline std::string* PlayerInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:chatServer.PlayerInfo.nickname)
  return _s;
}
inline const std::string& PlayerInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void PlayerInfo::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:chatServer.PlayerInfo.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chatServer.PlayerInfo.nickname)
}

// optional string password = 3;
inline bool PlayerInfo::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerInfo::has_password() const {
  return _internal_has_password();
}
inline void PlayerInfo::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerInfo::password() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.password)
}
inline std::string* PlayerInfo::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:chatServer.PlayerInfo.password)
  return _s;
}
inline const std::string& PlayerInfo::_internal_password() const {
  return password_.Get();
}
inline void PlayerInfo::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_password() {
  // @@protoc_insertion_point(field_release:chatServer.PlayerInfo.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chatServer.PlayerInfo.password)
}

// optional int64 signUpTime = 4;
inline bool PlayerInfo::_internal_has_signuptime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerInfo::has_signuptime() const {
  return _internal_has_signuptime();
}
inline void PlayerInfo::clear_signuptime() {
  signuptime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_signuptime() const {
  return signuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::signuptime() const {
  // @@protoc_insertion_point(field_get:chatServer.PlayerInfo.signUpTime)
  return _internal_signuptime();
}
inline void PlayerInfo::_internal_set_signuptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  signuptime_ = value;
}
inline void PlayerInfo::set_signuptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_signuptime(value);
  // @@protoc_insertion_point(field_set:chatServer.PlayerInfo.signUpTime)
}

// -------------------------------------------------------------------

// BlackList

// repeated int64 uid = 1;
inline int BlackList::_internal_uid_size() const {
  return uid_.size();
}
inline int BlackList::uid_size() const {
  return _internal_uid_size();
}
inline void BlackList::clear_uid() {
  uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlackList::_internal_uid(int index) const {
  return uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlackList::uid(int index) const {
  // @@protoc_insertion_point(field_get:chatServer.BlackList.uid)
  return _internal_uid(index);
}
inline void BlackList::set_uid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:chatServer.BlackList.uid)
}
inline void BlackList::_internal_add_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  uid_.Add(value);
}
inline void BlackList::add_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_uid(value);
  // @@protoc_insertion_point(field_add:chatServer.BlackList.uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlackList::_internal_uid() const {
  return uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BlackList::uid() const {
  // @@protoc_insertion_point(field_list:chatServer.BlackList.uid)
  return _internal_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlackList::_internal_mutable_uid() {
  return &uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BlackList::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:chatServer.BlackList.uid)
  return _internal_mutable_uid();
}

// repeated string nickname = 2;
inline int BlackList::_internal_nickname_size() const {
  return nickname_.size();
}
inline int BlackList::nickname_size() const {
  return _internal_nickname_size();
}
inline void BlackList::clear_nickname() {
  nickname_.Clear();
}
inline std::string* BlackList::add_nickname() {
  std::string* _s = _internal_add_nickname();
  // @@protoc_insertion_point(field_add_mutable:chatServer.BlackList.nickname)
  return _s;
}
inline const std::string& BlackList::_internal_nickname(int index) const {
  return nickname_.Get(index);
}
inline const std::string& BlackList::nickname(int index) const {
  // @@protoc_insertion_point(field_get:chatServer.BlackList.nickname)
  return _internal_nickname(index);
}
inline std::string* BlackList::mutable_nickname(int index) {
  // @@protoc_insertion_point(field_mutable:chatServer.BlackList.nickname)
  return nickname_.Mutable(index);
}
inline void BlackList::set_nickname(int index, const std::string& value) {
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chatServer.BlackList.nickname)
}
inline void BlackList::set_nickname(int index, std::string&& value) {
  nickname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chatServer.BlackList.nickname)
}
inline void BlackList::set_nickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chatServer.BlackList.nickname)
}
inline void BlackList::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chatServer.BlackList.nickname)
}
inline std::string* BlackList::_internal_add_nickname() {
  return nickname_.Add();
}
inline void BlackList::add_nickname(const std::string& value) {
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chatServer.BlackList.nickname)
}
inline void BlackList::add_nickname(std::string&& value) {
  nickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chatServer.BlackList.nickname)
}
inline void BlackList::add_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chatServer.BlackList.nickname)
}
inline void BlackList::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chatServer.BlackList.nickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlackList::nickname() const {
  // @@protoc_insertion_point(field_list:chatServer.BlackList.nickname)
  return nickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlackList::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable_list:chatServer.BlackList.nickname)
  return &nickname_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
